//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamWeb.EventService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDTO", Namespace="http://schemas.datacontract.org/2004/07/ExamWCF.DTOs")]
    [System.SerializableAttribute()]
    public partial class EventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventImageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClosedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayDate {
            get {
                return this.DisplayDateField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayDateField, value) != true)) {
                    this.DisplayDateField = value;
                    this.RaisePropertyChanged("DisplayDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((this.EventIDField.Equals(value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventImageName {
            get {
                return this.EventImageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventImageNameField, value) != true)) {
                    this.EventImageNameField = value;
                    this.RaisePropertyChanged("EventImageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventImagePath {
            get {
                return this.EventImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.EventImagePathField, value) != true)) {
                    this.EventImagePathField = value;
                    this.RaisePropertyChanged("EventImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClosed {
            get {
                return this.IsClosedField;
            }
            set {
                if ((this.IsClosedField.Equals(value) != true)) {
                    this.IsClosedField = value;
                    this.RaisePropertyChanged("IsClosed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        ExamWeb.EventService.EventDTO[] GetEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEvents", ReplyAction="http://tempuri.org/IEventService/GetEventsResponse")]
        System.Threading.Tasks.Task<ExamWeb.EventService.EventDTO[]> GetEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventByID", ReplyAction="http://tempuri.org/IEventService/GetEventByIDResponse")]
        ExamWeb.EventService.EventDTO GetEventByID(int eventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetEventByID", ReplyAction="http://tempuri.org/IEventService/GetEventByIDResponse")]
        System.Threading.Tasks.Task<ExamWeb.EventService.EventDTO> GetEventByIDAsync(int eventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/InsertEvent", ReplyAction="http://tempuri.org/IEventService/InsertEventResponse")]
        void InsertEvent(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/InsertEvent", ReplyAction="http://tempuri.org/IEventService/InsertEventResponse")]
        System.Threading.Tasks.Task InsertEventAsync(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpsertEvent", ReplyAction="http://tempuri.org/IEventService/UpsertEventResponse")]
        void UpsertEvent(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpsertEvent", ReplyAction="http://tempuri.org/IEventService/UpsertEventResponse")]
        System.Threading.Tasks.Task UpsertEventAsync(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        void UpdateEvent(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UpdateEvent", ReplyAction="http://tempuri.org/IEventService/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(ExamWeb.EventService.EventDTO eventDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        void DeleteEvent(int eventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/DeleteEvent", ReplyAction="http://tempuri.org/IEventService/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int eventID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : ExamWeb.EventService.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<ExamWeb.EventService.IEventService>, ExamWeb.EventService.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExamWeb.EventService.EventDTO[] GetEvents() {
            return base.Channel.GetEvents();
        }
        
        public System.Threading.Tasks.Task<ExamWeb.EventService.EventDTO[]> GetEventsAsync() {
            return base.Channel.GetEventsAsync();
        }
        
        public ExamWeb.EventService.EventDTO GetEventByID(int eventID) {
            return base.Channel.GetEventByID(eventID);
        }
        
        public System.Threading.Tasks.Task<ExamWeb.EventService.EventDTO> GetEventByIDAsync(int eventID) {
            return base.Channel.GetEventByIDAsync(eventID);
        }
        
        public void InsertEvent(ExamWeb.EventService.EventDTO eventDTO) {
            base.Channel.InsertEvent(eventDTO);
        }
        
        public System.Threading.Tasks.Task InsertEventAsync(ExamWeb.EventService.EventDTO eventDTO) {
            return base.Channel.InsertEventAsync(eventDTO);
        }
        
        public void UpsertEvent(ExamWeb.EventService.EventDTO eventDTO) {
            base.Channel.UpsertEvent(eventDTO);
        }
        
        public System.Threading.Tasks.Task UpsertEventAsync(ExamWeb.EventService.EventDTO eventDTO) {
            return base.Channel.UpsertEventAsync(eventDTO);
        }
        
        public void UpdateEvent(ExamWeb.EventService.EventDTO eventDTO) {
            base.Channel.UpdateEvent(eventDTO);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(ExamWeb.EventService.EventDTO eventDTO) {
            return base.Channel.UpdateEventAsync(eventDTO);
        }
        
        public void DeleteEvent(int eventID) {
            base.Channel.DeleteEvent(eventID);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int eventID) {
            return base.Channel.DeleteEventAsync(eventID);
        }
    }
}
