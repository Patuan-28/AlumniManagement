//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamWeb.FacultyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FacultyDTO", Namespace="http://schemas.datacontract.org/2004/07/ExamWCF.DTOs")]
    [System.SerializableAttribute()]
    public partial class FacultyDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FacultyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FacultyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FacultyID {
            get {
                return this.FacultyIDField;
            }
            set {
                if ((this.FacultyIDField.Equals(value) != true)) {
                    this.FacultyIDField = value;
                    this.RaisePropertyChanged("FacultyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FacultyName {
            get {
                return this.FacultyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FacultyNameField, value) != true)) {
                    this.FacultyNameField = value;
                    this.RaisePropertyChanged("FacultyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacultyService.IFacultyService")]
    public interface IFacultyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/GetFaculties", ReplyAction="http://tempuri.org/IFacultyService/GetFacultiesResponse")]
        ExamWeb.FacultyService.FacultyDTO[] GetFaculties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/GetFaculties", ReplyAction="http://tempuri.org/IFacultyService/GetFacultiesResponse")]
        System.Threading.Tasks.Task<ExamWeb.FacultyService.FacultyDTO[]> GetFacultiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/GetFacultyByID", ReplyAction="http://tempuri.org/IFacultyService/GetFacultyByIDResponse")]
        ExamWeb.FacultyService.FacultyDTO GetFacultyByID(int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/GetFacultyByID", ReplyAction="http://tempuri.org/IFacultyService/GetFacultyByIDResponse")]
        System.Threading.Tasks.Task<ExamWeb.FacultyService.FacultyDTO> GetFacultyByIDAsync(int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/InsertFaculty", ReplyAction="http://tempuri.org/IFacultyService/InsertFacultyResponse")]
        void InsertFaculty(ExamWeb.FacultyService.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/InsertFaculty", ReplyAction="http://tempuri.org/IFacultyService/InsertFacultyResponse")]
        System.Threading.Tasks.Task InsertFacultyAsync(ExamWeb.FacultyService.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/UpdateFaculty", ReplyAction="http://tempuri.org/IFacultyService/UpdateFacultyResponse")]
        void UpdateFaculty(ExamWeb.FacultyService.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/UpdateFaculty", ReplyAction="http://tempuri.org/IFacultyService/UpdateFacultyResponse")]
        System.Threading.Tasks.Task UpdateFacultyAsync(ExamWeb.FacultyService.FacultyDTO faculty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/DeleteFaculty", ReplyAction="http://tempuri.org/IFacultyService/DeleteFacultyResponse")]
        void DeleteFaculty(int facultyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFacultyService/DeleteFaculty", ReplyAction="http://tempuri.org/IFacultyService/DeleteFacultyResponse")]
        System.Threading.Tasks.Task DeleteFacultyAsync(int facultyID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFacultyServiceChannel : ExamWeb.FacultyService.IFacultyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FacultyServiceClient : System.ServiceModel.ClientBase<ExamWeb.FacultyService.IFacultyService>, ExamWeb.FacultyService.IFacultyService {
        
        public FacultyServiceClient() {
        }
        
        public FacultyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FacultyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacultyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FacultyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExamWeb.FacultyService.FacultyDTO[] GetFaculties() {
            return base.Channel.GetFaculties();
        }
        
        public System.Threading.Tasks.Task<ExamWeb.FacultyService.FacultyDTO[]> GetFacultiesAsync() {
            return base.Channel.GetFacultiesAsync();
        }
        
        public ExamWeb.FacultyService.FacultyDTO GetFacultyByID(int facultyID) {
            return base.Channel.GetFacultyByID(facultyID);
        }
        
        public System.Threading.Tasks.Task<ExamWeb.FacultyService.FacultyDTO> GetFacultyByIDAsync(int facultyID) {
            return base.Channel.GetFacultyByIDAsync(facultyID);
        }
        
        public void InsertFaculty(ExamWeb.FacultyService.FacultyDTO faculty) {
            base.Channel.InsertFaculty(faculty);
        }
        
        public System.Threading.Tasks.Task InsertFacultyAsync(ExamWeb.FacultyService.FacultyDTO faculty) {
            return base.Channel.InsertFacultyAsync(faculty);
        }
        
        public void UpdateFaculty(ExamWeb.FacultyService.FacultyDTO faculty) {
            base.Channel.UpdateFaculty(faculty);
        }
        
        public System.Threading.Tasks.Task UpdateFacultyAsync(ExamWeb.FacultyService.FacultyDTO faculty) {
            return base.Channel.UpdateFacultyAsync(faculty);
        }
        
        public void DeleteFaculty(int facultyID) {
            base.Channel.DeleteFaculty(facultyID);
        }
        
        public System.Threading.Tasks.Task DeleteFacultyAsync(int facultyID) {
            return base.Channel.DeleteFacultyAsync(facultyID);
        }
    }
}
