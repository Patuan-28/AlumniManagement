@model ExamWeb.Models.FacultyModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .table-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            margin: 0 auto;
            padding: 20px;
        }

        /* Atur tampilan tabel agar responsif */
        .dataTables_wrapper {
            width: 100%;
            max-width: 1200px; /* Atur sesuai kebutuhan */
            margin: 0 auto;
        }

        /* Pastikan tabel menyesuaikan layar */
        table.dataTable {
            width: 100%;
            max-width: 100%;
            margin: 0 auto;
        }

        /* Penyesuaian untuk pagination & informasi */
        .dataTables_wrapper .dataTables_paginate {
            float: none;
            text-align: center;
        }

        .dataTables_wrapper .dataTables_info {
            float: left;
            padding-top: 0.755em;
        }

        .dataTables_wrapper .bottom {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Fixed Footer */
        .footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #343a40;
            color: white;
            text-align: center;
            padding: 10px;
        }

        /* Supaya tabel tidak ketutup footer */
        .content {
            padding-bottom: 50px;
        }
    </style>
}

<h2>Faculty</h2>

@*@Html.ActionLink("Add New", "Create", null, new { @class = "btn btn-primary" })*@

@Html.Partial("_CreateFaculty")
@Html.Partial("_EditFaculty")
<button id="createButton" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createModal">
    Add New
</button>

@*delete checkbox*@
<button id="deleteSelected" class="btn btn-danger">Delete Selected</button>
<table class="table" id="facultiesData" style="width:100%">
    <thead>
        <tr>
            <th><input type="checkbox" id="selectAll" /></th>
            <th>Actions</th>
            <th>No.</th>
            <th>
                @Html.DisplayNameFor(model => model.FacultyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ModifiedDate)
            </th>
        </tr>
    </thead>
</table>

@*Create modal*@
<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel">Create New Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @using (Html.BeginForm("Create", "Faculty", FormMethod.Post, new { id = "createForm" }))
            {
                @Html.AntiForgeryToken()
                //Template location
                <div class="modal-body">
                    Form Starts Here
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.FacultyName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FacultyName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FacultyName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group mt-2">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Create</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

@*Edit modal*@
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Faculty</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @using (Html.BeginForm("Edit", "Faculty", FormMethod.Post, new { id = "editForm" }))
            {
                @Html.AntiForgeryToken()
                //Template Edit
                <div class="modal-body">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.FacultyID)
                        <div class="form-group">
                            Name
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.FacultyName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FacultyName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group mt-2">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>



@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        //Data table JS
        $(document).ready(function () {
            var table = $('#facultiesData').DataTable({
                "ajax": {
                    "url": "@Url.Action("GetFaculties", "Faculty")",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    //column for checkbox
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return '<input type="checkbox" class="selectCheckbox" data-id="' + row.FacultyID + '" />';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            var editLink = '@Url.Action("Edit", "Faculty", new { id = "PLACEHOLDER" })'.replace("PLACEHOLDER", row.FacultyID);

                            return '<div style="display: flex; gap: 5px;">' +
                            '<a href="javascript:void(0);" class="btn btn-primary" data-id="' + row.FacultyID + '" id="editButton" style="margin-left: 5px;">Edit</a>' +
                            '<button id="deleteButton" class="btn btn-danger deleteButton" data-id="' + row.FacultyID + '" style="margin-left: 5px;">Delete</button>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                    { "data": "FacultyName" },
                    { "data": "Description"},
                    {
                        "data": "ModifiedDate",
                        "render": function (data, type, row) {
                            return moment(data).format('DD-MMM-YYYY hh:mm:ss A');
                        }
                    },
                ],
                "dom": '<"top"f>rt<"bottom"lpi><"clear">',
                "pagingType": "full_numbers",
                "pageLength": 10,
                "lengthMenu": [5, 10, 20, 30, 100],
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                "language": {
                    "paginate": {
                        "previous": "Previous",
                        "next": "Next",
                        "first": "<<",
                        "last": ">>"
                    }
                }
            });
            $('#facultiesData_filter input').unbind();
            $('#facultiesData_filter input').on('keyup', function (e) {
                var value = $(this).val();
                if (value.length >= 3 || value.length === 0) {
                    table.search(value).draw();
                }
            });
            $(document).on('click', '.deleteButton', function () {
                const itemId = $(this).data('id');
                Swal.fire({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this item!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel",
                    dangerMode: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Faculty/Delete',
                            type: 'POST',
                            data: { id: itemId },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        table.ajax.reload();
                                    });
                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                            },
                            error: function () {
                                Swal.fire("Error!", "Unable to delete the item. Please try again.", "error");
                            }
                        });
                    }
                });
            });
            $('#selectAll').on('click', function () {
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input[type="checkbox"]', rows).prop('checked', this.checked);
            });
            $('#deleteSelected').on('click', function () {
                var selectedIds = [];
                $('.selectCheckbox:checked').each(function () {
                    selectedIds.push($(this).data('id'));
                });
                if (selectedIds.length > 0) {
                    Swal.fire({
                        title: "Are you sure? you will not be able to recover these items!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, delete them!",
                        cancelButtonText: "No, keep them"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Make an AJAX call to delete the selected items
                            $.ajax({
                                url: '/Faculty/DeleteSelected',
                                type: 'POST',
                                data: { ids: selectedIds },
                                traditional: true,
                                success: function (response) {
                                    if (response.success) {
                                        Swal.fire("Deleted!", response.message, "success").then(() => {
                                            $('#facultiesData').DataTable().ajax.reload(); // Reload the DataTable
                                        });
                                    } else {
                                        Swal.fire("Error!", response.message, "error");
                                    }
                                },
                                error: function (error) {
                                    Swal.fire("Error!", "Unable to delete the items. Please try again.", "error");
                                }
                            });
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire("Cancelled", "Your items are safe :)", "error");
                        }
                    });
                } else {
                    Swal.fire("No items selected", "Please select items to delete.", "info");
                }
            });
        });

        //Create form JS
        $(document).ready(function () {
            $('#createForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'), // Form action URL
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            $('#createModal').modal('hide'); // Close modal
                            $('#createForm')[0].reset();
                            $('#facultiesData').DataTable().ajax.reload(); // Reload DataTable
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: "Faculty added succesfully",
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });

                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.errorMsg,
                                showConfirmButton: true // Show OK button
                            });

                        }
                    },
                    error: function (xhr) {
                        console.error(xhr.responseText);
                        alert('An error occurred while saving.');
                    }
                });
            });
        });

        //Edit form Js
        $(document).on('click', '#editButton', function () {
            var FacultyID = $(this).data('id'); // Get the ProductCategoryID from the button's data-id attribute

            // Make an AJAX request to get the data for the selected ProductCategory
            $.ajax({
                url: '/Faculty/GetFacultyID/' + FacultyID, // URL to fetch data for the specific category
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    // Populate the form fields with the data returned from the server
                    $('#editModal #FacultyID').val(response.FacultyID); // Assuming you have a hidden field for ID
                    $('#editModal #FacultyName').val(response.FacultyName);
                    $('#editModal #Description').val(response.Description);

                    // Show the Edit Modal
                    $('#editModal').modal('show');
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while fetching data.');
                }
            });
        });

        $('#editForm').submit(function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr('action'), // Form action URL
                type: 'POST',
                data: $(this).serialize(), // Serialize the form data
                success: function (response) {
                    if (response.success) {
                        $('#editModal').modal('hide'); // Close the modal
                        $('#facultiesData').DataTable().ajax.reload(); // Reload the DataTable
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: "Edit faculty Successful",
                            timer: 5000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.errorMsg,
                            showConfirmButton: true // Show OK button
                        });
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('An error occurred while saving.');
                }
            });
        });
    </script>
}